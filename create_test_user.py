#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append('.')

from app.database import SessionLocal
from app import models, schemas, crud

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è +9961111111111"""
    db = SessionLocal()
    
    try:
        phone = "9961111111111"
        print(f"üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º: {phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = crud.get_driver_user_by_phone(db, phone)
        if existing_user:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
            print(f"   ID: {existing_user.id}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {existing_user.phone}")
            print(f"   –ò–º—è: {existing_user.first_name}")
            print(f"   –§–∞–º–∏–ª–∏—è: {existing_user.last_name}")
            print(f"   –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {existing_user.is_verified}")
            print(f"   Driver ID: {existing_user.driver_id}")
            return existing_user
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = schemas.DriverUserCreate(
            phone=phone,
            first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            last_name="–í–æ–¥–∏—Ç–µ–ª—å"
        )
        
        user = crud.create_driver_user(db, user_data)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:")
        print(f"   ID: {user.id}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}")
        print(f"   –ò–º—è: {user.first_name}")
        print(f"   –§–∞–º–∏–ª–∏—è: {user.last_name}")
        
        return user
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        db.rollback()
        raise
    finally:
        db.close()

def create_test_driver():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è"""
    db = SessionLocal()
    
    try:
        phone = "9961111111111"
        print(f"\nüë®‚Äçüíº –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º: {phone}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
        existing_driver = db.query(models.Driver).filter(models.Driver.phone == phone).first()
        if existing_driver:
            print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:")
            print(f"   ID: {existing_driver.id}")
            print(f"   –ò–º—è: {existing_driver.full_name}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {existing_driver.phone}")
            print(f"   –°—Ç–∞—Ç—É—Å: {existing_driver.status}")
            return existing_driver
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        driver_data = {
            "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –í–æ–¥–∏—Ç–µ–ª—å –ò–≤–∞–Ω–æ–≤",
            "birth_date": "1990-01-01",
            "callsign": "–¢–ï–°–¢001",
            "unique_id": "TEST000000000000001",
            "city": "–ë–∏—à–∫–µ–∫",
            "driver_license_number": "TEST123456789",
            "driver_license_issue_date": "2020-01-01",
            "balance": 1000.0,
            "tariff": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
            "taxi_park": "–¢–µ—Å—Ç–æ–≤—ã–π –ü–∞—Ä–∫",
            "phone": phone,
            "status": "accepted",
            "activity": 10,
            "rating": "5.000"
        }
        
        driver = models.Driver(**driver_data)
        db.add(driver)
        db.commit()
        db.refresh(driver)
        
        print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:")
        print(f"   ID: {driver.id}")
        print(f"   –ò–º—è: {driver.full_name}")
        print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}")
        print(f"   –°—Ç–∞—Ç—É—Å: {driver.status}")
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º
        user = crud.get_driver_user_by_phone(db, phone)
        if user:
            user.driver_id = driver.id
            db.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–≤—è–∑–∞–Ω —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º")
        
        return driver
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = create_test_user()
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        driver = create_test_driver()
        
        print("\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–π—Ç–∏ —Å –Ω–æ–º–µ—Ä–æ–º: +9961111111111")
        print(f"üîë –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: 1111")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
