from fastapi import APIRouter, Depends, HTTPException, status, Response
from sqlalchemy.orm import Session
from pydantic import BaseModel
from typing import Optional

from .. import crud, models, schemas
from ..database import get_db
from ..models import TokenResponse

router = APIRouter(
    prefix="/driver",
    tags=["driver-auth"],
    responses={404: {"description": "Driver not found"}},
)

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è
class DriverLoginRequest(BaseModel):
    phone: str

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞
class VerifyCodeRequest(BaseModel):
    phone: str
    code: str

@router.post("/login", response_model=dict)
async def driver_login(request: DriverLoginRequest, db: Session = Depends(get_db)):
    """–í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ª—é–±–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å 9961111111111"""
    
    # –í–†–ï–ú–ï–ù–ù–û: –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º 9961111111111
    target_phone = "9961111111111"
    target_user = crud.get_driver_user_by_phone(db, target_phone)
    
    if not target_user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        target_user = crud.create_driver_user(db, schemas.DriverUserCreate(phone=target_phone))
    
    # –í–†–ï–ú–ï–ù–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö –¥–ª—è –ª—é–±–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    return {"success": True, "message": "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞", "target_user_id": target_user.id}

@router.post("/verify-code", response_model=TokenResponse)
async def verify_code(request: VerifyCodeRequest, response: Response = None, db: Session = Depends(get_db)):
    """
    –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –õ—é–±–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ +996111111111
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    """
    # –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    FIXED_PHONE = "996111111111"  # –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
    
    raw_phone = request.phone
    input_phone = ''.join(filter(str.isdigit, request.phone))
    
    print(f"üîÑ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä {raw_phone} ({input_phone})")
    print(f"üéØ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {FIXED_PHONE}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ (–≤—Å–µ–≥–¥–∞ 1111 –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
    if request.code != "1111":
        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥: {request.code}, –æ–∂–∏–¥–∞–µ—Ç—Å—è 1111")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
    
    print(f"‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π: {request.code}")
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    user = crud.get_driver_user_by_phone(db, FIXED_PHONE)
    
    if not user:
        print(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º {FIXED_PHONE}")
        try:
            user = crud.create_driver_user(db, schemas.DriverUserCreate(
                phone=FIXED_PHONE,
                first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
                last_name="–í–æ–¥–∏—Ç–µ–ª—å"
            ))
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: id={user.id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: id={user.id}")
    
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: id={user.id}, –∏–º—è={user.first_name}, driver_id={user.driver_id}")
    
    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
    user_update = schemas.DriverUserUpdate(is_verified=True)
    user = crud.update_driver_user(db, user.id, user_update)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    try:
        crud.update_last_login(db, user.id)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º
    has_driver = user.driver_id is not None
    driver_id = user.driver_id
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è: driver_id={driver_id}, has_driver={has_driver}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –∏—â–µ–º –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    if not has_driver:
        print(f"üîç –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º {FIXED_PHONE}")
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –≤ –ë–î
        phone_formats = [
            FIXED_PHONE,                    # 996111111111
            "+996111111111",                # +996111111111  
            "996 111-111-111",              # –° –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏
            "+996 111-111-111",             # –° + –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            "0111111111"                    # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        ]
        
        for phone_format in phone_formats:
            print(f"üîç –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º: {phone_format}")
            driver = db.query(models.Driver).filter(models.Driver.phone == phone_format).first()
            
            if driver:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å: id={driver.id}, –∏–º—è={driver.full_name}")
                # –°–≤—è–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
                user.driver_id = driver.id
                db.commit()
                
                has_driver = True
                driver_id = driver.id
                print(f"üîó –°–≤—è–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º: user_id={user.id}, driver_id={driver_id}")
                break
        
        if not has_driver:
            print(f"‚ö†Ô∏è –í–æ–¥–∏—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {FIXED_PHONE} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
    
    print(f"–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: has_driver={has_driver}, driver_id={driver_id}")
    
    # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    import jose.jwt
    import secrets
    from datetime import datetime, timedelta
    
    # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
    SECRET_KEY = "wazir_secret_key_2024"
    ALGORITHM = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES = 30 * 24 * 60  # 30 –¥–Ω–µ–π
    
    # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è —Ç–æ–∫–µ–Ω–∞
    to_encode = {
        "sub": str(user.id),
        "user_id": user.id,
        "phone": user.phone,
        "has_driver": has_driver,
        "driver_id": driver_id,
        "exp": datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    access_token = jose.jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {access_token[:50]}...")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    return TokenResponse(
        access_token=access_token,
        token_type="bearer",
        user_id=user.id,
        has_driver=has_driver,
        driver_id=driver_id
    )
