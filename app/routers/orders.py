from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime

from .. import crud, models, schemas
from ..database import get_db


router = APIRouter(
    prefix="/orders",
    tags=["orders"],
    responses={404: {"description": "Order not found"}},
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏

@router.post("/", response_model=schemas.Order, status_code=status.HTTP_201_CREATED)
def create_order(order: schemas.OrderCreate, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω)
    if order.driver_id is not None:
        db_driver = crud.get_driver(db, driver_id=order.driver_id)
        if db_driver is None:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Driver not found"
            )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)
    try:
        hours, minutes = order.time.split(":")
        if not (0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59):
            raise ValueError("Invalid time format")
    except ValueError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid time format. Must be in 'HH:MM' format (24-hour)"
        )
    
    return crud.create_order(db=db, order=order)

@router.get("/", response_model=List[schemas.Order])
def read_orders(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    orders = crud.get_orders(db, skip=skip, limit=limit)
    return orders

@router.get("/test-endpoint")
def test_endpoint():
    """–¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞"""
    return {"message": "Orders router works!", "timestamp": datetime.now().isoformat()}

@router.post("/test-complete-order")
def test_complete_order():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return {"message": "POST endpoint works!", "timestamp": datetime.now().isoformat()}

@router.post("/complete-with-progress-debug")
def complete_order_with_progress_debug(request: dict):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î"""
    print("üîç DEBUG: –í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é complete_order_with_progress_debug")
    print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω request: {request}")
    
    # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return {
        "success": True,
        "message": "Debug endpoint works!",
        "received_data": request,
        "timestamp": datetime.now().isoformat()
    }

@router.post("/complete-with-progress")
def complete_order_with_progress(
    request: dict,
    db: Session = Depends(get_db)
):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É"""
    print("üö® –ù–ê–ß–ê–õ–û –§–£–ù–ö–¶–ò–ò complete_order_with_progress")
    print(f"üö® –ü–æ–ª—É—á–µ–Ω request: {request}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    order_id = request.get('order_id')
    driver_id = request.get('driver_id')
    completion_type = request.get('completion_type')
    final_latitude = request.get('final_latitude')
    final_longitude = request.get('final_longitude')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if not order_id or not driver_id or not completion_type:
        raise HTTPException(
            status_code=400,
            detail="Missing required fields: order_id, driver_id, completion_type"
        )
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: order_id={order_id}, driver_id={driver_id}, type={completion_type}")
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
        db_order = crud.get_order(db, order_id=order_id)
        if not db_order:
            raise HTTPException(status_code=404, detail="Order not found")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        if db_order.driver_id != driver_id:
            raise HTTPException(status_code=403, detail="Order not assigned to this driver")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        if db_order.status == "–ó–∞–≤–µ—Ä—à–µ–Ω":
            raise HTTPException(status_code=400, detail="Order already completed")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è
        db_driver = crud.get_driver(db, driver_id=driver_id)
        if not db_driver:
            raise HTTPException(status_code=404, detail="Driver not found")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
        if final_latitude and final_longitude:
            db_driver.current_lat = final_latitude
            db_driver.current_lng = final_longitude
            db_driver.last_location_update = datetime.now()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –æ–ø–ª–∞—Ç—É
        base_price = float(db_order.price) if db_order.price else 433.0  # –¶–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if completion_type == "full":
            # –ü–æ–ª–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - 100% –æ–ø–ª–∞—Ç—ã
            db_order.actual_price = base_price
            db_order.progress_percentage = 100.0
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –æ–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–º–∏–Ω–∏–º—É–º 30%)
            progress = db_order.progress_percentage if db_order.progress_percentage and db_order.progress_percentage > 0 else 30.0
            db_order.actual_price = round(base_price * (progress / 100))
            db_order.progress_percentage = progress
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        db_order.status = "–ó–∞–≤–µ—Ä—à–µ–Ω"
        db_order.completed_at = datetime.now()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ–¥–∏—Ç–µ–ª—è
        if db_order.actual_price:
            db_driver.balance = float(db_driver.balance or 0) + float(db_order.actual_price)
        
        db.commit()
        db.refresh(db_order)
        db.refresh(db_driver)
        
        final_progress = db_order.progress_percentage or 30.0
        final_payment = db_order.actual_price or 0.0
        
        result = {
            "success": True,
            "order_id": db_order.id,
            "completion_type": completion_type,
            "progress_percentage": final_progress,
            "base_price": base_price,
            "actual_payment": final_payment,
            "driver_balance": db_driver.balance,
            "message": f"–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ {final_progress:.1f}%. –ü–æ–ª—É—á–µ–Ω–æ: {final_payment:.2f} —Å–æ–º"
        }
        
        print(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
        return result
        
    except HTTPException:
        db.rollback()
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        import traceback
        traceback.print_exc()
        db.rollback()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@router.get("/driver/{driver_id}", response_model=List[schemas.Order])
def read_driver_orders(driver_id: int, db: Session = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
    db_driver = crud.get_driver(db, driver_id=driver_id)
    if db_driver is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Driver not found"
        )
    
    orders = crud.get_driver_orders(db, driver_id=driver_id)
    return orders

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏

@router.get("/{order_id}", response_model=schemas.Order)
def read_order(order_id: int, db: Session = Depends(get_db)):
    db_order = crud.get_order(db, order_id=order_id)
    if db_order is None:
        raise HTTPException(status_code=404, detail="Order not found")
    return db_order

@router.get("/{order_id}/status")
def get_order_status(order_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    db_order = crud.get_order(db, order_id=order_id)
    if db_order is None:
        raise HTTPException(status_code=404, detail="Order not found")
    
    return {
        "order_id": order_id,
        "status": db_order.status,
        "driver_id": db_order.driver_id,
        "created_at": db_order.created_at,
        "updated_at": getattr(db_order, 'updated_at', None)
    }

@router.put("/{order_id}", response_model=schemas.Order)
def update_order_info(order_id: int, order: schemas.OrderCreate, db: Session = Depends(get_db)):
    db_order = crud.get_order(db, order_id=order_id)
    if db_order is None:
        raise HTTPException(status_code=404, detail="Order not found")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
    db_driver = crud.get_driver(db, driver_id=order.driver_id)
    if db_driver is None:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Driver not found"
        )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (—á—á:–º–º)
    try:
        hours, minutes = order.time.split(":")
        if not (0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59):
            raise ValueError("Invalid time format")
    except ValueError:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid time format. Must be in 'HH:MM' format (24-hour)"
        )
    
    return crud.update_order(db=db, order_id=order_id, order_data=order)

@router.delete("/{order_id}", response_model=schemas.Order)
def delete_order(order_id: int, db: Session = Depends(get_db)):
    db_order = crud.get_order(db, order_id=order_id)
    if db_order is None:
        raise HTTPException(status_code=404, detail="Order not found")
    return crud.delete_order(db=db, order_id=order_id)