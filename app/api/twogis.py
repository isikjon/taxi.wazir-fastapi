from fastapi import APIRouter, HTTPException, Query, Body
from typing import List, Tuple, Optional
from pydantic import BaseModel
import logging

from app.services.twogis_service import twogis_service

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/api/twogis", tags=["2GIS API"])

@router.get("/geocode")
async def geocode_address(
    address: str = Query(..., description="–ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"),
    region: str = Query("kg", description="–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (kg –¥–ª—è –ö–∏—Ä–≥–∏–∑–∏–∏)")
):
    """
    –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
    """
    logger.info(f"üîç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {address}, —Ä–µ–≥–∏–æ–Ω: {region}")
    try:
        result = await twogis_service.geocode_address(address, region=region)
        if result:
            logger.info(f"‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {result}")
            return {
                "success": True,
                "data": result
            }
        else:
            logger.warning(f"‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {address}")
            raise HTTPException(status_code=404, detail="–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ {address}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@router.get("/reverse-geocode")
async def reverse_geocode(
    lat: float = Query(..., description="–®–∏—Ä–æ—Ç–∞"),
    lon: float = Query(..., description="–î–æ–ª–≥–æ—Ç–∞")
):
    """
    –û–±—Ä–∞—Ç–Ω–∞—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -> –∞–¥—Ä–µ—Å)
    """
    logger.info(f"üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞: {lat}, {lon}")
    try:
        result = await twogis_service.reverse_geocode(lat, lon)
        if result:
            logger.info(f"‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {result}")
            return {
                "success": True,
                "address": result
            }
        else:
            logger.warning(f"‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {lat}, {lon}")
            return {
                "success": False,
                "address": f"{lat:.6f}, {lon:.6f}"
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∏ {lat}, {lon}: {str(e)}")
        return {
            "success": False,
            "address": f"{lat:.6f}, {lon:.6f}"
        }

@router.get("/search")
async def search_addresses(
    query: str = Query(..., description="–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤"),
    limit: int = Query(5, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"),
    region: str = Query("kg", description="–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ (kg –¥–ª—è –ö–∏—Ä–≥–∏–∑–∏–∏)")
):
    """
    –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
    """
    logger.info(f"üîç –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤: {query}, –ª–∏–º–∏—Ç: {limit}, —Ä–µ–≥–∏–æ–Ω: {region}")
    try:
        results = await twogis_service.search_addresses(query, limit=limit, region=region)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {len(results) if results else 0}")
        return {
            "success": True,
            "data": results
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ {query}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤: {str(e)}")

@router.post("/route")
async def get_route(
    origin_lat: float = Query(..., description="–®–∏—Ä–æ—Ç–∞ —Ç–æ—á–∫–∏ –Ω–∞—á–∞–ª–∞"),
    origin_lon: float = Query(..., description="–î–æ–ª–≥–æ—Ç–∞ —Ç–æ—á–∫–∏ –Ω–∞—á–∞–ª–∞"),
    destination_lat: float = Query(..., description="–®–∏—Ä–æ—Ç–∞ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ü–∞"),
    destination_lon: float = Query(..., description="–î–æ–ª–≥–æ—Ç–∞ —Ç–æ—á–∫–∏ –∫–æ–Ω—Ü–∞"),
    transport_type: str = Query("car", description="–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞")
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
    """
    logger.info(f"üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: ({origin_lat}, {origin_lon}) -> ({destination_lat}, {destination_lon}), —Ç–∏–ø: {transport_type}")
    try:
        origin = (origin_lat, origin_lon)
        destination = (destination_lat, destination_lon)
        
        result = await twogis_service.get_route(origin, destination, transport_type)
        if result:
            logger.info(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {result.get('distance', 0)}–º, –≤—Ä–µ–º—è {result.get('duration', 0)}—Å")
            return {
                "success": True,
                "data": result
            }
        else:
            logger.warning(f"‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {origin} -> {destination}")
            raise HTTPException(status_code=404, detail="–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {str(e)}")

class DistanceMatrixRequest(BaseModel):
    origins: List[Tuple[float, float]]
    destinations: List[Tuple[float, float]]
    transport_type: str = "car"

@router.post("/distance-matrix")
async def get_distance_matrix(request: DistanceMatrixRequest):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
    """
    try:
        result = await twogis_service.get_distance_matrix(
            request.origins, 
            request.destinations, 
            request.transport_type
        )
        if result:
            return {
                "success": True,
                "data": result
            }
        else:
            raise HTTPException(status_code=404, detail="–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {str(e)}")

@router.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è 2GIS API
    """
    return {
        "success": True,
        "api_key_configured": bool(twogis_service.api_key),
        "secret_key_configured": bool(twogis_service.secret_key),
        "status": "ready" if twogis_service.api_key else "no_api_key"
    } 