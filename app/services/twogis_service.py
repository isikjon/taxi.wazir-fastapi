import aiohttp
import asyncio
import hashlib
import base64
import json
import time
import logging
from typing import Dict, List, Tuple, Optional, Any
from app.config import settings

logger = logging.getLogger(__name__)

class TwoGISService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 2GIS API"""
    
    def __init__(self):
        self.api_key = settings.TWOGIS_API_KEY
        self.secret_key = settings.TWOGIS_SECRET_KEY
        
        # API endpoints
        self.geocoder_url = settings.TWOGIS_GEOCODER_URL
        self.routing_url = settings.TWOGIS_ROUTING_URL
        self.distance_matrix_url = settings.TWOGIS_DISTANCE_MATRIX_URL
        self.search_url = settings.TWOGIS_SEARCH_URL
        
        # –ö—ç—à –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._geocoding_cache = {}
        self._routing_cache = {}
        
        logger.info(f"üöÄ TwoGISService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API –∫–ª—é—á–æ–º: {'*' * 8 + self.api_key[-4:] if self.api_key else '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}")
        if self.secret_key:
            logger.info(f"üîê –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            logger.info(f"‚ÑπÔ∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    
    def _create_signature(self, data: str) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á)
        """
        if not self.secret_key:
            return ""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
        return ""
    
    async def geocode_address(self, address: str, region: str = "kg") -> Optional[Dict]:
        """
        –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        
        Args:
            address: –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞ (kg - –ö–∏—Ä–≥–∏–∑–∏—è)
        
        Returns:
            Dict —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏–ª–∏ None
        """
        logger.info(f"üîç –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {address}")
        
        if not self.api_key:
            print("‚ö†Ô∏è 2GIS API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{address}_{region}"
        if cache_key in self._geocoding_cache:
            cache_data = self._geocoding_cache[cache_key]
            if time.time() - cache_data['timestamp'] < settings.GEOCODING_CACHE_TTL:
                logger.info(f"‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: {address}")
                return cache_data['data']
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    'q': address,
                    'region': region,
                    'fields': 'items.point,items.address_name,items.full_name',
                    'key': self.api_key
                }
                
                logger.debug(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ 2GIS Geocoder API: {params}")
                
                async with session.get(self.geocoder_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.debug(f"üì° –û—Ç–≤–µ—Ç –æ—Ç 2GIS API: {data}")
                        
                        if data.get('result') and data['result'].get('items'):
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            item = data['result']['items'][0]
                            result = {
                                'lat': item['point']['lat'],
                                'lon': item['point']['lon'],
                                'address': item.get('full_name', address),
                                'name': item.get('name', ''),
                                'confidence': 1.0
                            }
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self._geocoding_cache[cache_key] = {
                                'data': result,
                                'timestamp': time.time()
                            }
                            
                            logger.info(f"‚úÖ –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {result}")
                            return result
                        else:
                            print(f"‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {address}")
                            logger.warning(f"‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API: {address}")
                            return None
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status}")
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ '{address}': {e}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ {address}: {e}")
            return None
    
    async def get_route(self, origin: Tuple[float, float], 
                        destination: Tuple[float, float], 
                        transport_type: str = "car") -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
        
        Args:
            origin: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª–∞ (lat, lon)
            destination: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–Ω—Ü–∞ (lat, lon)
            transport_type: –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (car, taxi, pedestrian)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ä—à—Ä—É—Ç–µ –∏–ª–∏ None
        """
        if not self.api_key:
            print("‚ö†Ô∏è 2GIS API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{origin}_{destination}_{transport_type}"
        if cache_key in self._routing_cache:
            cache_data = self._routing_cache[cache_key]
            if time.time() - cache_data['timestamp'] < settings.ROUTING_CACHE_TTL:
                return cache_data['data']
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    'origin': f"{origin[1]},{origin[0]}",  # lon,lat
                    'destination': f"{destination[1]},{destination[0]}",
                    'type': transport_type,
                    'key': self.api_key
                }
                
                async with session.get(self.routing_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('result') and data['result'].get('routes'):
                            route = data['result']['routes'][0]
                            result = {
                                'distance': route.get('distance', 0),  # –≤ –º–µ—Ç—Ä–∞—Ö
                                'duration': route.get('duration', 0),  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                                'geometry': route.get('geometry', {}),
                                'steps': route.get('steps', []),
                                'transport_type': transport_type
                            }
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            self._routing_cache[cache_key] = {
                                'data': result,
                                'timestamp': time.time()
                            }
                            
                            return result
                        else:
                            print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                            return None
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞: {e}")
            return None
    
    async def get_distance_matrix(self, origins: List[Tuple[float, float]], 
                                 destinations: List[Tuple[float, float]], 
                                 transport_type: str = "car") -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            origins: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞—á–∞–ª–∞
            destinations: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ–Ω—Ü–∞
            transport_type: –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        
        Returns:
            Dict —Å –º–∞—Ç—Ä–∏—Ü–µ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏
        """
        if not self.api_key:
            print("‚ö†Ô∏è 2GIS API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return None
        
        try:
            async with aiohttp.ClientSession() as session:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
                payload = {
                    'origins': [{'lat': lat, 'lon': lon} for lat, lon in origins],
                    'destinations': [{'lat': lat, 'lon': lon} for lat, lon in destinations],
                    'type': transport_type,
                    'traffic_mode': 'enabled'  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–∫–∏
                }
                
                headers = {
                    'Content-Type': 'application/json',
                    'Authorization': f'Key {self.api_key}'
                }
                
                async with session.post(self.distance_matrix_url, 
                                      json=payload, 
                                      headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('result'):
                            return {
                                'distances': data['result'].get('distances', []),
                                'durations': data['result'].get('durations', []),
                                'status': data['result'].get('status', '')
                            }
                        else:
                            print(f"‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
                            return None
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {response.status}")
                        return None
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {e}")
            return None
    
    async def reverse_geocode(self, lat: float, lon: float) -> Optional[str]:
        """
        –û–±—Ä–∞—Ç–Ω–∞—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -> –∞–¥—Ä–µ—Å)
        
        Args:
            lat: –®–∏—Ä–æ—Ç–∞
            lon: –î–æ–ª–≥–æ—Ç–∞
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        if not self.api_key:
            logger.error("‚ùå API –∫–ª—é—á 2GIS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∏")
            return None
            
        cache_key = f"reverse_{lat:.6f}_{lon:.6f}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self._geocoding_cache:
            cached_result = self._geocoding_cache[cache_key]
            if time.time() - cached_result['timestamp'] < settings.GEOCODING_CACHE_TTL:
                logger.info(f"üóÑÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∫—ç—à–∞: {cached_result['data']}")
                return cached_result['data']
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä 2GIS –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            params = {
                'point': f"{lon},{lat}",  # 2GIS –æ–∂–∏–¥–∞–µ—Ç lon,lat
                'key': self.api_key,
                'types': 'building,adm_div',
                'radius_m': 100,  # —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ 100 –º–µ—Ç—Ä–æ–≤
                'output_format': 'json'
            }
            
            async with aiohttp.ClientSession() as session:
                logger.info(f"üîÑ –û–±—Ä–∞—Ç–Ω–∞—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑ 2GIS API: {lat}, {lon}")
                
                async with session.get(self.geocoder_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('result') and data['result'].get('items'):
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            item = data['result']['items'][0]
                            address_name = item.get('full_name', '')
                            
                            if address_name:
                                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                self._geocoding_cache[cache_key] = {
                                    'data': address_name,
                                    'timestamp': time.time()
                                }
                                
                                logger.info(f"‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {address_name}")
                                return address_name
                            else:
                                logger.warning(f"‚ö†Ô∏è –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö API")
                                return None
                        else:
                            logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç API –≥–µ–æ–∫–æ–¥–µ—Ä–∞")
                            return None
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—Ç–Ω–æ–π –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–µ: {response.status}")
                        return None
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∫–∏: {e}")
            return None

    async def search_addresses(self, query: str, region: str = "kg", limit: int = 5) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–æ–≤ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        
        Args:
            query: –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
            region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        """
        if not self.api_key:
            print("‚ö†Ô∏è 2GIS API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return []
        
        try:
            async with aiohttp.ClientSession() as session:
                params = {
                    'q': query,
                    'region': region,
                    'fields': 'items.point,items.address_name,items.full_name,items.name',
                    'key': self.api_key,
                    'limit': limit
                }
                
                async with session.get(self.geocoder_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if data.get('result') and data['result'].get('items'):
                            results = []
                            for item in data['result']['items']:
                                results.append({
                                    'lat': item['point']['lat'],
                                    'lon': item['point']['lon'],
                                    'address': item.get('full_name', ''),
                                    'name': item.get('name', ''),
                                    'short_address': item.get('address_name', '')
                                })
                            return results
                        else:
                            return []
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤: {response.status}")
                        return []
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–æ–≤: {e}")
            return []

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
twogis_service = TwoGISService() 